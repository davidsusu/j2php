package sample;

import foo.Bar;
import foo.Baz;

public class SampleClass extends SampleAbstractClass implements SampleInterface, Serializable {
    
    private static final long serialVersionUID = 1L;
    
    
    public static SampleClass lastInstance;
    
    
    private int num1, num2;
    
    private int z;
    
    
    {
        z = num1 - num2;
    }
    
    {
        z += 7;
    }
    
    static {
        new SampleClass(1, 2);
    }
    
    public SampleClass() {
        this(0, 0);
    }
    
    public SampleClass(int num1, int num2) {
        super("s" + num1 + "_" + num2);
        this.num1 = num1;
        this.num2 = num2;
        lastInstance = this;
    }
    
    public int getSum() {
        return num1 + num2;
    }
    
    public int getMul() {
        return num1 * num2;
    }
    
    public boolean check(int num1, int num2) {
        return (num1 == this.num1 && num2 == this.num2);
    }
    
    public SampleClass getIncremented() {
        return new SampleClass(num1 + 1, num2 + 1);
    }
    
    public int methodWithComplexBody(int input) {
        int result = 0;
        int x = 0b11;
        {
            int a = 5;
            a--;
            result += a;
            result *= a;
            result -= input;
            {
                int b = 2;
                b++;
                result += b * 3;
            }
            {
                int b = 3;
                if (b > 2) {
                    b--;
                }
                result *= b;
                result += input;
            }
        }
        {
            int a = 2;
            int b = 3;
            if (a > 2) {
                result += a * b * input;
            } else if (b < 2) {
                result += a * b;
            } else if (a + b == 2) {
                result += input;
            } else {
                result += 5;
            }
            for (int i = 0; i < 10; i++) {
                result++;
            }
            switch (result) {
                case 1:
                    System.out.println("result is one");
                    break;
                case 2:
                case 3:
                    System.out.println("result is two or three");
                    break;
                default:
                    System.out.println("result is other");
            }
        }
        int a = 4;
        result += a + 1 - ((a + x) * 2);
        while (result % 10 != 3 && result % 35 != 7) {
            result--;
        }
        do {
            result++;
        } while (result < 50 * Math.sin(result / 50));
        return result;
    }
    
    public void throwsMethod() throws java.io.IOException {
        throw new java.io.IOException("Oops!");
    }
    
    public void testSpecialStatementsAndExpressions() {
        SampleClass sample = new SampleClass(1, 2);
        Object sampleObject = (Object)sample.getIncremented();
        try {
            throwsMethod();
        } catch (java.io.IOException e) {
            e.printStackTrace();
        } finally {
            System.out.print("and... ");
            System.out.println("finally...");
        }
        if (sampleObject instanceof SampleClass) {
            System.out.println("IS instance of...");
        }
        synchronized (sampleObject) {
            System.out.println("synchronized...");
        }
    }
    
    public void fooBar() {
        super.fooBar();
        System.out.println("Child fooBar()");
    }
    
    public void testArrays() {
        int[] array1 = new int[] {1, 2, 3, 4, 5};
        
        int sum1 = 0;
        for (int i = 0; i < array1.length; i++) {
            sum1 += array1[i];
        }
        
        int[] array2 = new int[5];
        array2[2] = 22;
        array2[3] = 33;
        array2[1] = 11;
        array2[5] = 55;
        array2[4] = 44;
        int sum2 = 0;
        for (int value: array2) {
            sum2 += array2[i];
        }
        
        int mulOfDiffs = 1;
        for (int i = 0, j = array2.length - 1; i < array1.length; i++, j--) {
            mulOfDiffs *= array1[i] - array2[j];
        }
        
        System.out.println(sum1 + " / " + sum2 + " / " + mulOfDiffs);
        
        int[][][] multiDimensionalArray = new int[4][3][2];
        multiDimensionalArray[2][1][0] = 7;
        
        int d = 3;
        int[][][] dynamicMultiDimensionalArray = new int[d - 1][3][d];
        dynamicIncompleteMultiDimensionalArray[d - 2][2][d - 1] = d * d;
        
        int[][][] incompleteMultiDimensionalArray = new int[3][2][];
        incompleteMultiDimensionalArray[1][0] = new int[] {};
        
        int e = 4;
        int[][][] dynamicIncompleteMultiDimensionalArray = new int[e][e + 3][];
        
        int[][][] initializedMultiDimensionalArray = new int[][][] {
            {
                {1, 2}, {3, 4}, {5, 6}
            },
            {
                {7, 8}
            },
            {
                {9}
            }
        };
    }
    
    @Override
    public void virtualMethod(String name) {
        System.out.println(HELLO + ", " + name + "!");
    }
    
    @Override
    public String decorate(String str) {
        return "(" + str + ")";
    }
    
    @Override
    public String toString() {
        return "num1's value: \"" + num1 + "\"\nnum2's value: \"" + num1 + "\"";
    }
    
}
